<?php

namespace common\modules\blog\models;

use common\components\behaviors\StatusBehaviors;
use common\models\ImageManager;
use Yii;
use yii\db\ActiveRecord;
use yii\helpers\ArrayHelper;
use yii\db\Expression;
use yii\behaviors\TimestampBehavior;
use yii\helpers\FileHelper;
use yii\helpers\Url;
use yii\image\drivers\Image;
use yii\web\UploadedFile;
/**
 * This is the model class for table "blog".
 *
 * @property int $id
 * @property string $title
 * @property string $text
 * @property string $image
 * @property string $url
 * @property int $status_id
 * @property int $sort
 * @property int date_create
 * @property int date_update
 */
class Blog extends ActiveRecord
{
    public $old_tags;
    public $file;

    const STATUS_LIST = ['on', 'off'];
    const IMAGES_SIZE = [
        ['50','50'],
        ['800', null]
    ];

    public function behaviors()
    {
        return [
            'timestampBehaviors' => [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'date_create',
                'updatedAtAttribute' => 'date_update',
                'value' => new Expression('NOW()'),
            ],
            'stausBehaviors' => [
                'class' => StatusBehaviors::className(),
                'statusList' => self::STATUS_LIST,
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%blog}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title', 'url'], 'required'],
            [['text'], 'string'],
            [['url'], 'unique'],
            [['title', 'url'], 'string', 'max' => 150],
//            [['status_id'], 'string', 'max' => 1],
            [['status_id','sort'], 'integer'],
            [['sort'], 'integer', 'max' => 99, 'min' => 1],
            [['sort'], 'string', 'max' => 2],
            [['date_create','date_update'], 'safe'],
            [['image'], 'string', 'max' => 100],
            [['file'], 'image'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Заголовок',
            'text' => 'Текст',
            'url' => 'ссылка',
            'status_id' => 'Статус',
            'sort' => 'Сортировка',
            'date_update' => 'Дата обновления',
            'date_create' => 'Дата создания',
            'image' => 'Фото',
            'file' => 'Фото',
        ];
    }

    public function getAuthor() {
        return $this->hasOne(User::className(),['id' => 'user_id']);
    }

    public function getBlogTag() {
        return $this->hasMany(BlogTag::className(),['blog_id' => 'id']);
    }

    public function getTags() {
        return $this->hasMany(Tag::className(),['id' => 'tag_id'])->via('blogTag');
    }

    public function getImages() {
        return $this->hasMany(ImageManager::className(),['item_id' => 'id'])->andWhere(['class' => 'Blog'])->orderBy('sort');
    }

    public function getImageLinksData() {
        return ArrayHelper::toArray($this->images,[
           ImageManager::className() => [
               'caption' => 'name',
               'key' => 'id',
           ]
        ]);
    }

    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub
        $this->old_tags = ArrayHelper::map($this->tags,'id','name');
    }

    public function getImageLinks() {
        return ArrayHelper::getColumn($this->images,'imageUrl');
    }

    public function beforeDelete()
    {
        if (parent::beforeDelete()) {
            $dir = Yii::getAlias('@images') . '/blog/';

            if (file_exists($dir . $this->image)) {
                unlink($dir . $this->image);
            }

            foreach (self::IMAGES_SIZE as $size) {
                $size_dir = $size[0] . 'x';
                if ($size[1] != null) {
                    $size_dir .= $size[1] . 'x';
                }
                if (file_exists($dir . $this->image)) {
                    unlink($dir . $size_dir . '/'. $this->image);
                }
            }

            BlogTag::deleteAll(['blog_id' => $this->id]);
            return true;
        } else {
            return false;
        }
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        if (Yii::$app->request->isPost) {
            $post_tags = $this->getNewTagFromPost(Yii::$app->request->post());
//            dd($this->old_tags);
            if ($post_tags) {

                BlogTag::deleteAll(['blog_id' => $this->id]);

                foreach ($post_tags as $tag_id) {
//                dd($tag_id);
                    if ($tag = $this->findTagById($tag_id)) {
                        $blog_tag = new BlogTag();
                        $blog_tag->tag_id = $tag->id;
                        $blog_tag->blog_id = $this->id;
                        $blog_tag->save();
                    }
                }
            } else {
                BlogTag::deleteAll(['blog_id' => $this->id]);
                return true;
            }
        } else {
            return true;
        }

    }

    /*
     * @return true, create new Tag
     */
    private function createNewTag($new_tag) {
        $tag = new Tag();
        $tag->name = $new_tag;
        $tag->save();
        return $tag;
    }
    /*
     * @return true or false, true - create new Tag, false - Tag isset
     */
    private function findTagById($tag_id) {
        if ($tag = Tag::find()->where(['id' => $tag_id])->one()) {
            return $tag;
        } else {
            return $this->createNewTag($tag_id);
        }
    }

    /*
    * @return array witch new list tags
    */
    private function getNewTagFromPost () {

        $new_tags = Yii::$app->request->post();
        if (isset($new_tags['Blog']['tags'])) {
            return $new_tags['Blog']['tags'];
        } else {
            return false;
        }
    }

    /*
     * return string with tag
     */

    public function getTag() {
        $all_tags = '';
        $i = 1;
        foreach($this->tags as $tag) {
            if ($i >= 3 || $i % 3 == 0) {
                $all_tags .= $tag->name . '<br>';
            } else {
                $all_tags .= $tag->name . ' ';
            }
            $i++;
        }
        return $all_tags;
    }

    public function beforeSave($insert)
    {
        if ($file = UploadedFile::getInstance($this,'file')) {
            $dir = Yii::getAlias('@images') . '/blog/';

            if (!file_exists($dir . '50x50')) {
                FileHelper::createDirectory($dir . '50x50');
            }
            if (!file_exists($dir . '800x')) {
                FileHelper::createDirectory($dir . '800x');
            }

            if (!is_dir($dir . $this->image)) {
                if (file_exists($dir . $this->image)) {
                    unlink($dir . $this->image);
                }
                if (file_exists($dir . '50x50/' . $this->image)) {
                    unlink($dir . $this->image);
                }
                if (file_exists($dir . '800x' . $this->image)) {
                    unlink($dir . '800x' . $this->image);
                }
            }

            $this->image = strtotime('now') . '_' . Yii::$app->security->generateRandomString(6) . '.' . $file->extension;
            $file->saveAs($dir . $this->image);

            $imag = Yii::$app->image->load($dir . $this->image);
            $imag->background('#fff', 0);
            $imag->resize('50','50', Image::INVERSE);
            $imag->crop('50','50');
            $imag->save($dir . '50x50/' . $this->image, 90);
            $imag = Yii::$app->image->load($dir . $this->image);
            $imag->background('#fff', 0);
            $imag->resize('800',null, Image::INVERSE);
            $imag->save($dir . '800x/' . $this->image, 90);

        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function getSmallImage() {

        $dir = Yii::getAlias('@images') . '/blog/50x50/';
        $start = strpos($dir,'uploads');
        $dir = substr($dir,$start);

        if (!$this->image) {
            return Url::home(true) . $dir . 'no-image.png';
        }
        return Url::home(true) . $dir . $this->image;
    }
}
